# –±–æ—Ç –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –∑ CSV —Ñ–∞–π–ª—É  + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
# https://t.me/idstickerbot –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—É —Å—Ç–∏–∫–µ—Ä—ñ–≤
# –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –±–æ—Ç–∞ - https://www.pythonanywhere.com/user/vkm/consoles/
import random
import csv
from telebot import TeleBot, types
from _keyeng import TOKEN

# –û–±'—î–∫—Ç –±–æ—Ç–∞
bot = TeleBot(TOKEN)

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ—Ä–Ω–∏—Ö —ñ –Ω–µ–≤—ñ—Ä–Ω–∏—Ö –≤–∏–±–æ—Ä—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_stats = {}

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
display_mode = "uk_to_en"  # "uk_to_en" –∞–±–æ "en_to_uk"

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
correct_translation = ""
question_word = ""

# –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ CSV —Ñ–∞–π–ª—É
file_path = 'D:\\Python\\vsc01\\tg_bot_english\\eng_word_big.csv'
words = []

with open(file_path, mode='r', encoding='utf-8') as file:
    reader = csv.DictReader(file, delimiter=';')
    for row in reader:
        words.append({'en': row['en'], 'ua': row['ua']})

def get_random_words():
    return random.sample(words, 4)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
def send_control_buttons(chat_id):
    control_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    control_kb.add(types.KeyboardButton('üîÑ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º'))
    control_kb.add(types.KeyboardButton('üìä –í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏'), types.KeyboardButton('üìà –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏'))
    # control_kb.add(types.KeyboardButton('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'))  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É
    bot.send_sticker(chat_id, 'CAACAgIAAxkBAAEM9jVnC9qu5HDVKMavp8sc2WeTLeWQGAACfQAD9wLIDy7JuwrdyyJJNgQ')
    bot.send_message(chat_id, "–í—ñ—Ç–∞—é!\n–ë–æ—Ç –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –∑ CSV —Ñ–∞–π–ª—É —Ç–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤", reply_markup=control_kb) #"–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:"
    # –î–æ–¥–∞—î–º–æ inline –∫–Ω–æ–ø–∫—É –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –∫–∞–Ω–∞–ª
    inline_kb = types.InlineKeyboardMarkup()
    inline_kb.add(types.InlineKeyboardButton('Viktor Kaliuta', url='https://t.me/vkaliuta'))
    bot.send_message(chat_id, "–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä—É:", reply_markup=inline_kb)

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=['start'])
def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_stats:
        user_stats[user_id] = {'correct_count': 0, 'incorrect_count': 0}
    send_control_buttons(message.chat.id)
    send_new_word(message.chat.id)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏
def send_new_word(chat_id):
    global display_mode, correct_translation, question_word
    selected_words = get_random_words()
    correct_word = random.choice(selected_words)
    correct_translation = correct_word['ua'] if display_mode == "uk_to_en" else correct_word['en']
    question_word = correct_word['en'] if display_mode == "uk_to_en" else correct_word['ua']

    inline_kb = types.InlineKeyboardMarkup()
    if display_mode == "uk_to_en":
        for word in selected_words:
            inline_kb.add(types.InlineKeyboardButton(word['en'], callback_data=f"{word['en']}_{correct_word['ua']}"))
        bot.send_message(chat_id, f"–û–±–µ—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ - {correct_word['ua']} :", reply_markup=inline_kb)
    else:
        for word in selected_words:
            inline_kb.add(types.InlineKeyboardButton(word['ua'], callback_data=f"{word['ua']}_{correct_word['en']}"))
        bot.send_message(chat_id, f"Choose a translation - {correct_word['en']} :", reply_markup=inline_kb)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ callback data
def callback_filter(call):
    if call.data:
        return call.data
    return False

@bot.callback_query_handler(func=callback_filter)
def callback_inline(call: types.CallbackQuery):
    global correct_translation, question_word
    user_id = call.from_user.id
    if user_id not in user_stats:
        user_stats[user_id] = {'correct_count': 0, 'incorrect_count': 0}
    
    try:
        data = call.data.split('_')
        selected_word, given_translation = data[0], data[1]
        
        if (display_mode == "uk_to_en" and any(word['en'] == selected_word and word['ua'] == given_translation for word in words)) or \
           (display_mode == "en_to_uk" and any(word['ua'] == selected_word and word['en'] == given_translation for word in words)):
            user_stats[user_id]['correct_count'] += 1
            bot.send_message(call.message.chat.id, f"‚úÖ –≤—ñ—Ä–Ω–æ, {correct_translation} - {question_word}")
        else:
            user_stats[user_id]['incorrect_count'] += 1
            bot.send_message(call.message.chat.id, f"‚ùå –Ω–µ–≤—ñ—Ä–Ω–æ, {correct_translation} - {question_word}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        send_new_word(call.message.chat.id)
        bot.answer_callback_query(callback_query_id=call.id)
    except Exception as e:
        print(f"Error handling callback: {e}")  # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–º–∏–ª–∫–∏

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(func=lambda message: True)
def handle_message(message: types.Message):
    global display_mode
    user_id = message.from_user.id
    if user_id not in user_stats:
        user_stats[user_id] = {'correct_count': 0, 'incorrect_count': 0}
    
    # if {user_stats[user_id]['correct_count']} == 7:
    #     bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEM9jtnC94AAfCheYWtxNfF68T_k0qiK7IAAnEAA_cCyA95CsT0_beIyzYE')

    if message.text == 'üìä –í–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏':
        bot.send_message(message.chat.id, f"–í—ñ—Ä–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {user_stats[user_id]['correct_count']}\n–ù–µ–≤—ñ—Ä–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {user_stats[user_id]['incorrect_count']}")
    # elif message.text == 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
    #     user_stats[user_id] = {'correct_count': 0, 'incorrect_count': 0}
    #     bot.send_message(message.chat.id, "C—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–∏—â–µ–Ω–æ!")
    elif message.text == 'üîÑ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º':
        display_mode = "en_to_uk" if display_mode == "uk_to_en" else "uk_to_en"
        bot.send_message(message.chat.id, f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {'–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ –¥–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞' if display_mode == 'en_to_uk' else '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –¥–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞'}")
        send_new_word(message.chat.id)
    elif message.text == 'üìà –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏':
        total_stats = ""
        for user_id, stats in user_stats.items():
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ ID
            user = bot.get_chat(user_id)
            user_name = user.first_name
            total_stats += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:\n{user_name}, –í—ñ—Ä–Ω–æ: {stats['correct_count']}, –ù–µ–≤—ñ—Ä–Ω–æ: {stats['incorrect_count']}\n"
        
        bot.send_message(message.chat.id, total_stats if total_stats else "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É –ø–æ–ª–ª—ñ–Ω–≥—É –Ω–æ–≤–∏—Ö –∞–ø–¥–µ–π—Ç—ñ–≤
if __name__ == '__main__':
    bot.infinity_polling()